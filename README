PAIR_UTILITIES
==============

Utilities to process pre-calculated pairs.  This includes translating them 
from a FITS format (ala Yue Shen), and binning them for results. There are 
several additional testing utilities as well. 

The code is in three parts: 
 1. C code "libraries" (generic functions for easy tool creation) 
 2. compiled utilities (binaries that do something) 
 3. post-processing scripts

Comments, suggestions, tweaks, and edits are welcome. 


GENERAL USE
-----------

Assuming one has a FITS file containing pairs of interest, 
there are three things to do: 

 1. translate FITS to the desired PAIRS format
    e.g. see translate_pairs_proj 

 2. do something with the PAIRS file
    e.g. see bin_pairs_proj 

 3. create statistic from counts 
    e.g. see calc_cross_corr.rb 


C LIBRARIES
-----------

There are three current code files that define functions and are 
library-like.  These do most of the heavy lifting for the above utilities,
and are intended to be able to easily create new utilities. 

    lib/bins.h
	abstracted creation and utilities for binning, should be n-dimensional

    lib/pairs.h
	definition, reading, and writing of the PAIRs format 

    lib/weight_set.h
	a quick set of functions to define a "weight set" and read such 
	from an ASCII space delimited file
    

C UTILITIES
-----------

There are a number of useful binary utilities intended just for use. 

    translate_pairs_proj  FITS_FILE PAIRS_FILE
	convert FITS pair file into truncated (slightly filtered) 
	PAIRS file in PAIR_PROJ format (i.e. rp-pi and IDs only). 
	
    bin_pairs_proj  OUT_BINNED  WEIGHT1  WEIGHT2  PAIRS*
	read a number of PAIRS files, and two weight files associated 
	with ID1 (first) and ID2 (second). Produce a binned count 
	(including normalized version). 

	The weight files have to be at least 1 column: 
	    1: ID (integer) 
	    2: WEIGHT (float weight value) 
	Additional columns are skipped (although a 3rd is read). If
	the 2nd column (WEIGHT) is neglected, a weight of '1' is 
	assumed. 

	The "normalized" counts weight each pair by the product of 
	the weights (count += w1 * w2), and normalize by the total 
	weight represented in each weight file. 
	  

    bin_pairs_proj_jack  OUT_BINNED WEIGHT1 WEIGHT2  PAIRS*
	Similar utility to "bin_pairs_proj" but now does this for 
	N jackknife samples.  Produces one binned output file per 
	jackknife sample.  
	
	The 3rd column of the WEIGHT file defines which ID belongs 
	to which jackknife sample.  The number of jackknife samples
	is auto determined based on these (zero based) jackknife IDs. 


POST-PROCESSING SCRIPTS
-----------------------

These are simple scripts (in ruby, a language similar to python / perl)
for various types of post-processing.  For example, combine counts 
into a statistic, such as xi(r), or calculate a jackknife covariance 
matrix. 


AUTHOR 
------

Cameron McBride 
cameron.mcbride@gmail.com 
June 2012
